enum ASSET_TYPE {
  AUDIO,
  IMAGE,
}
interface Choice {
  question: Sentence;
  answer: string[];
}
interface Charactor {
  name: string;
  images: {
    [Key: string]: string;
  };
}
interface Sentence {
  word: string;
  wait?: number;
  duration?: number;
  audio?: string;
}
// type Prompt = (Sentence[] | Charactor | Choice)[];
// interface Prompt {
//   charactor: Charactor;
//   sentence: (Sentence | Choice)[];
// }
interface Prompt {
  charactor: Charactor;
  sentence: (number | string)[];
}
// interface Prompt {
//   sentence: Sentence[];
//   charactor: Charactor;
//   choice?: Choice;
// }
interface Background {
  image?: string;
  position?: string;
  color?: string;
}
interface Scene {
  prompt: Prompt[];
  background: Background;
}
interface Assets {
  type: ASSET_TYPE;
  url: string;
}
interface Chapter {
  scene: Scene[];
  assets: Assets[];
}
interface Game {
  chapter: Chapter[];
}
// class Canvas {
//   #width = 0;
//   #height = 0;
//   #canvas = document.getElementById("visual-novel") as HTMLCanvasElement;
//   #context = this.#canvas.getContext("2d");
//   constructor() {
//     this.resizing(800, 600);
//     this.#context.fillRect(25, 25, 100, 100);
//     this.#context.clearRect(0, 0, this.#width, this.#height);
//     // this.#context.strokeRect(50, 50, 50, 50);
//   }

//   protected resizing(width: number, height: number) {
//     this.#width = width;
//     this.#height = height;
//     this.#canvas.width = this.#width;
//     this.#canvas.height = this.#height;
//   }
//   protected drawImage() {
//     this.#context.drawImage;
//   }
// }
class Canvas {
  #app = new PIXI.Application();
  // #canvas = document.getElementById("visual-novel") as HTMLCanvasElement;
  // #context = this.#canvas.getContext("2d");
  constructor() {
    document.body.appendChild(this.#app.view);
    // this.#context.fillRect(25, 25, 100, 100);
    // this.#context.clearRect(0, 0, this.#width, this.#height);
    // this.#context.strokeRect(50, 50, 50, 50);
    this.resizing(800, 600);
  }

  protected resizing(width: number, height: number) {
    this.#app.view.width = width;
    this.#app.view.height = height;
    // this.#canvas.width = this.#width;
    // this.#canvas.height = this.#height;
  }
  protected drawImage() {
    // this.#context.drawImage;
  }
}
// class Dom {
//   #width = 0;
//   #height = 0;
//   #context = document.getElementById("visual-novel") as HTMLDivElement;
//   constructor() {
//     this.resizing(800, 600);
//     // this.#context.strokeRect(50, 50, 50, 50);
//   }
//   protected resizing(width: number, height: number) {
//     this.#width = width;
//     this.#height = height;
//     this.#context.setAttribute(
//       "style",
//       `width: ${this.#width}px; height: ${this.#height}px;`
//     );
//   }
// }
import * as PIXI from "pixi.js";

class Game extends Canvas {
  // class Game extends Dom {
  #chapter: Chapter[];
  #assets: Assets[];

  constructor(chapter: Chapter[]) {
    super();
    this.#chapter = chapter;
    this.#assets = Array(this.#chapter.length).fill(null);
    this.#assets.map((x) => console.log(x));

    // The application will create a renderer using WebGL, if possible,
    // with a fallback to a canvas render. It will also setup the ticker
    // and the root stage PIXI.Container

    // load the texture we need
    // app.loader.add("bunny", "bunny.png").load((loader, resources) => {
    //   // This creates a texture from a 'bunny.png' image
    //   const bunny = new PIXI.Sprite(resources.bunny.texture);

    //   // Setup the position of the bunny
    //   bunny.x = app.renderer.width / 2;
    //   bunny.y = app.renderer.height / 2;

    //   // Rotate around the center
    //   bunny.anchor.x = 0.5;
    //   bunny.anchor.y = 0.5;

    //   // Add the bunny to the scene we are building
    //   app.stage.addChild(bunny);

    //   // Listen for frame updates
    //   app.ticker.add(() => {
    //     // each frame we spin the bunny around a bit
    //     bunny.rotation += 0.01;
    //   });
    // });
    // console.log(this.chapter);
  }

  chapterLoading() {}

  render() {}
}
const dd = new Game([
  {
    scene: [],
    assets: [
      {
        type: ASSET_TYPE.IMAGE,
        url: "assets/shutterstock_376532611.jpeg",
      },
    ],
  },
]);
